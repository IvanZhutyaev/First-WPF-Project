GridSplitter - разделитель столбцов и строк 
StackPanel-располагает все элементы в ряд либо по горизонтали, либо по вертикали в зависимости от ориентации(!!!Вместо Grid, НО МОЖНО КОМБИНИРОВАТЬ!!!)

DockPanel - контейнер прижимает все содержимое к определенной стороне внешнего контейнера
WrapPanel-Главное отличие от StackPanel - если элементы не помещаются в строке или столбце, создаются новые столбец или строка ля не поместившихся элементов
Canvas - размещает элементы относительно сторон

Свойства компоновки элементов:
MinWidth/MaxWidth
MinHeight/MaxHeight

Выравнивание:
HorizontalAlignment - горизонтальное выравнивание элементов (Left, Right, Center, Stretch)
VerticalAlignment - вертикальное выравнивание элементов (Top, Bottom, Center, Stretch)

Отступы - margin(Left Top Right Bottom)(0 0 20 10)

Panel.ZIndex - слои(чем выше номер, тем выше он будет находится)

Свойство FieldModifier задаёт модификатор доступа к объекту:
<Button x:FieldModifier="internal" x:Name="lol" Content="Hello World" />

Visibility:
Visible - элемент виден и учавствует в компоновке
Collapsed - элемент не виден и не учавствует в компоновке
Hidden - элемент не виден, но при этом учавствует в компоновке

FontFamily - определяет семейство шрифта (например, Arial, Verdana и т.д.)
FontSize - определяет высоту шрифта
FontStyle - определяет наклон шрифта, принимает одно из трех значений - Normal, Italic,Oblique.
FontWeight - определяет толщину шрифта и принимает ряд значений, как Black,Bold и др.
FontStretch - определяет, как будет растягивать или сжимать текст, например, значение Condensed сжимает текст, а Expanded - расстягивает.

Cursor - свойство позволяет нам получить или установить курсор для элемента управление в одно из значений
button1.Cursor=Cursors.Hand

button1.Background = New SolidColorBrush(Colors.Red) = задний фон
button1.Foreground = New SolidColorBrush(Colors.Red) = шрифт

Свойство Content - вложенный контент
Фактически иерархия:
Button->Content->StringName(или что-то ещё)

В ОТЛИЧИЕ ОТ КОНТЕЙНЕРОВ КОМПОНОВКИ ДЛЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СОДЕРЖИМЫМ МЫ МОЖЕМ ЗАДАТЬ ТОЛЬКО ОДИН ВЛОЖЕННЫЙ ЭЛЕМЕНТ


Children.Add - используется для добавления вложенных элементов только для контейнеров компоновки

.Content - используется для добавления я вложенных элементов в элементы управления(button, label, checkbox и т.д.)

Content Alignment - Vertical/Horizontal

Padding - отступ контента

<Button x:Name="btn1" Padding="1 1 1 1" HorizontalContentAlignment="Left />

У кнопки также есть два свойства - IsDefault(Enter) и IsCanсel(Esc)

Виды событий:
Прямые - они возникают и отрабатывают на одном элемент не никуда дальше не передаются
Поднимающиеся - возникают на одном элементе, а потом передаются дальше к родителю - MouseDown
Опускаюшиеся(тоннельные)-начинает отрабатывать в корневом элементе окна приложения и идёт далее по вложенным элементам, пока не достигнет элемента , вызывавшего событие - PreviewMouseDown

Свойства класса RoutedEventArgs:
Sourse - элемент логического дерева, являющийся источником события
OriginalSourse - элемент визуального дерева, являющийся источником события 
RoutedEvent-представляет имя события
Handled-если это устройство  установлено True, событие не будет подниматься и опускаться, а ограничится непосредственным источником

ВСЕ ТOННЕЛЬНЫЕ СОБЫТИЯ НАЧИНАЮТСЯ СО СЛОВА ПРЕВЬЮ



Прикрепляемые события - если у нас несколько элементов одного типа  и мы хотим прикрепить к ним одно событие
Пример:
<StackPanel x:Name="menuSelector" Grid.Column="0" RadioButton.Checked="RadioButton_Click">
    <RadioButton GroupName="menu" Content="Салат Оливье"/>
    <RadioButton GroupName="menu" Content="Котлета по-киевски"/>

    <RadioButton GroupName="menu" Content="Пицца с овощами"/>
    <RadioButton GroupName="menu" Content="Мясной рулет"/>
</StackPanel>

menuSelector.AddHandler(radioButton.CheckedEvent,new RoutedEventHandler(radioButton_Click); - динамическая привязка 


KeyboardDevice:
Modifiers - позволяет узнать какая клавиша была нажата с основной(ctrl, shift, alt)
IsKeyDown() - определяет, была ли нажата клавиша во время события
IsKeyUp() - позволяет узнать, были ли отжата клавиша во время события
IsKeyToggled() - позволяет узнать, была ли во время события включена клавиша Капс лок, Скролл лок или Нам Лок
GetKeyStates() - возвращает одно из значений перечисления KeyStates, которое указывает на состояние клавиши

Пример:
if(e.KeyboardDevice.Modifiers == ModifierKeys.Shift && e.Key == Key.F1)
{
	MessageBox.Show("HELLO");
}


Команды - походи на события, но использование команд помогает нам сократить объем кода и исполоьзовать одну и ту же команду для нескольких элементов управления в различных местах программмы.

Модель команд в WPF состоит из 4 аспектов:
Сама команда (выполняемая задача)
Привязка команд(связывает команнды с опредедённой логикой приложения)
Источник команд(пример:кнопка)
Цель команд(элемент интерфейса)


Все команды реализует ОДИН ИНТЕРЙФЕС - ICommand

Execute - предназначен для хранения логики команды
CanExecute - true, если команда включена и доступна для использования, и false, если команда отключена.
CanExecutrChanged - вызывается, если изменяется состояние команды


Группы команд:
1)ApplicationCommands - общие команды приложения
2)NavigationCommands - команды навигации
3)ComponentCommands - команды компонентов интерфейса
4)EditingCommands - команды редактирования документов
5)MediaCommands - команды для управления мультимедиа
6)SystemCommands - системные команды
7)RibbonCommands - команды ленты панели